#!/usr/bin/env sh

SETDNS_SOCKET=/var/run/appgate/dns-set.sock

mk_dnsmasq_conf () {
    KUBE_DNS_SERVICE=$(cat /etc/resolv.conf  | awk 'BEGIN{c=0}
$1 ~ /nameserver/ {print($2);c++}
END {if(c != 1) exit(1)}')

    if [ $? -ne 0 -o -z "$KUBE_DNS_SERVICE" ]; then
        echo "Unable to get the kube dns service!. Dying now!"
        exit 1
    fi
    echo server=$KUBE_DNS_SERVICE > /etc/dnsmasq.d/appgate.conf
    echo $KUBE_DNS_SERVICE > /tmp/kube-dns
    cat > /etc/dnsmasq.conf << EOF
no-resolv
listen-address=127.0.0.1
conf-file=/etc/dnsmasq.d/appgate.conf
EOF
}

mk_dnsmasq_conf

if [[ $DNSMASQ_DEBUG -eq 1 ]]; then
    LOG_QUERIES="--log-queries"
else
    LOG_QUERIES=""
fi

# Start dnsmasq now so it has not pid 1
# --log-facility sends the logs to the stdout the process with PID 1
/usr/sbin/dnsmasq --pid-file=/sdp-dnsmasq/dnsmasq.pid --port=53 --local-service \
                  --listen-address=127.0.0.1 $LOG_QUERIES --log-facility /proc/1/fd/1

# Start listening for events from sdp-driver
# socat will fork sdp-dnsmasq-set-dns and it will send data receive in the socket to the
# process. We set stdout to fd=4 so we can still use stdout in the forked process to log
# stuff into stdout
exec socat UNIX-LISTEN:$SETDNS_SOCKET,fork system:/sdp-dnsmasq/sdp-dnsmasq-set-dns,fdout=4
